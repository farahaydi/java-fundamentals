/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;
import java.util.*;

public class Library {
    public boolean someLibraryMethod() {
        return true;
    }
    public static void main(String[] args) {
        // LAB 02 Function :
//        System.out.println(roll(9));
        System.out.println("======================================");

//        int array[]={1,2,3,4,7,1};
//        System.out.println(containsDuplicates(array));
        System.out.println("======================================");


//        System.out.println(calculatingAverages(array));
        System.out.println("======================================");

        int[][] testingArray = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };
//        System.out.println(Arrays.toString(arraysOfArrays(testingArray)));
        System.out.println("======================================");


        // LAB 03 Function :
        System.out.println(AnalyzingWeatherData(testingArray));
        System.out.println("======================================");

//        List<String> votes = new ArrayList<>();
//        votes.add("Bush");
//        votes.add("Bush");
//        votes.add("Bush");
//        votes.add("Shrub");
//        votes.add("Hedge");
//        votes.add("Shrub");
//        votes.add("Bush");
//        votes.add("Hedge");
//        votes.add("Bush");
//
//        System.out.println(tally(votes));


    }

    //===============================================================
    public static ArrayList<Integer> roll(int number) {
        Random random = new Random();

        ArrayList<Integer> numbers = new ArrayList<>();
        for (int i = 0; i < number; i++) {
            int random_number = random.nextInt(6) + 1;
            numbers.add((random_number));

        }
        return numbers;
    }
    //=================================================================
    public static boolean containsDuplicates(int[] nums) {
        for (int i = 0; i < nums.length - 1; i++) {
            for (int j = i + 1; j < nums.length; j++) {
                if (nums[i] == nums[j]) {
                    return true;
                }
            }
        }
        return false;
    }

    //===============================================================
    public static double calculatingAverages(int array[]) {
        double avg = 0;
        int arrayLength = array.length;
        for (int i = 0; i < arrayLength; i++) {
            avg += array[i];
        }
        return avg / arrayLength;
    }
    //================================================================
    public static int[] arraysOfArrays(int[][] array) {
        double minAvg = Integer.MAX_VALUE;
        double minIndex = -1;
        double avg;
        for (int i = 0; i < array.length; i++) {
            avg = 0;
            for (int j = 0; j < array[i].length; j++) {
                avg += array[i][j];
                System.out.print(array[i][j] + " ");
            }
            avg/=array[i].length;
            System.out.println("Array of " + i + " " );
            if (avg < minAvg) {
                minAvg = avg;
                minIndex = i;
            }
            System.out.println();
        }

        return array[(int) minIndex];
    }

    public static String AnalyzingWeatherData(int[][] OctoberSeattleWeatherData) {
        int minNumber = OctoberSeattleWeatherData[0][0];
        int maxNumber = OctoberSeattleWeatherData[0][0];
        HashSet<Integer> uniqueTemperature = new HashSet<>();

        for (int i = 0; i < OctoberSeattleWeatherData.length; i++) {
            for (int j = 0; j < OctoberSeattleWeatherData[i].length; j++) {
                if (OctoberSeattleWeatherData[i][j] < minNumber) {
                    minNumber = OctoberSeattleWeatherData[i][j];
                }
                if (OctoberSeattleWeatherData[i][j] > maxNumber) {
                    maxNumber = OctoberSeattleWeatherData[i][j];
                }
                uniqueTemperature.add(OctoberSeattleWeatherData[i][j]);
            }
        }

        System.out.println("Minimum Number is: " + minNumber);
        System.out.println("Maximum Number is: " + maxNumber);
        System.out.println(uniqueTemperature);
        String Notfound ="";
        for (int unique = 51; unique <= 72; unique++) {
            if (!uniqueTemperature.contains(unique)) {
                Notfound+=(unique+ " Was Not Found \n");
            }
        }
        return Notfound;
    }

//    Tallying Election
//    Write a function called tally that accepts a List of Strings representing votes and returns one string to show
//    what got the most votes.
//

    public static String  tally (List<String> list) {
        HashMap<String, Integer> TallyingElection = new HashMap<>();

        for (int i = 0; i < list.size(); i++)
            if (TallyingElection.containsKey(list.get(i))) {
                int count = TallyingElection.get(list.get(i));
                TallyingElection.put(list.get(i), count + 1);
            } else {
                TallyingElection.put(list.get(i), 1);
            }
//        System.out.println(TallyingElection);

        int maxVotes = 0;
        for (int MapValue : TallyingElection.values()) {
            if (MapValue > maxVotes) {
                maxVotes = MapValue;
            }
        }
//        System.out.println("Max= " + maxVotes);
        String Winner = "";
        for (String MapKey : TallyingElection.keySet()) {
                if (TallyingElection.get(MapKey) == maxVotes) {
                    {
                        Winner = MapKey;
                        break;
                    }
            }
        }
        return Winner + " Is Winner , Contes " + maxVotes + " Votes!";


    }}